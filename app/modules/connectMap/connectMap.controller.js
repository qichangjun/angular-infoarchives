// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  angular.module("myApp").controller("connectMapController", [
    '$scope', '$log', '$state', 'mdDialogService', '$timeout', '$mdToast', 'hsAuth', 'connectMapService', 'statisticsService', 'serviceWatchService', 'batchService', '$interval', function($scope, $log, $state, mdDialogService, $timeout, $mdToast, hsAuth, connectMapService, statisticsService, serviceWatchService, batchService, $interval) {
      var getList, getOverAll, getSystemInfo, getSystemLists, init, listenEvent, refreshList, vm;
      vm = this;
      refreshList = null;
      vm.tiptool = {
        show: false,
        x: null,
        y: null,
        info: {}
      };
      $scope.data = {
        name: '',
        type: 'root',
        children: []
      };
      init = function() {
        getSystemLists();
        listenEvent();
        return getOverAll();
      };
      getList = function() {
        return serviceWatchService.getList().then(function(res) {
          var i, j, len, ref, rows, str;
          vm.detailInfos = res.data;
          ref = vm.detailInfos;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            rows = ref[i];
            str = Date.parse(new Date()).toString();
            rows.keepTime = (str - rows.startDate) / 1000;
            rows.keepDay = Math.floor(rows.keepTime / 86400);
            rows.keepHour = Math.floor(rows.keepTime % 86400 / 3600);
            rows.keepMinute = Math.floor(rows.keepTime % 86400 % 3600 / 60);
          }
          return angular.forEach(vm.detailInfos, function(item) {
            var parameter;
            if (item.jobName === 'ERMS导入服务') {
              serviceWatchService.getErmsMissionList().then(function(res) {
                if (res.aipPackageCount === 0 || !res.aipPackageCount) {
                  return item.progress = 0;
                } else {
                  return item.progress = (res.importErmsCount / res.aipPackageCount) * 100;
                }
              });
            } else if (item.jobName !== 'ERMS导入服务') {
              if (item.jobName === 'AIP封装') {
                parameter = {
                  batchStatus: 4
                };
              } else if (item.jobName === 'AIU封装') {
                parameter = {
                  batchStatus: 0
                };
              } else if (item.jobName === 'SIP封装') {
                parameter = {
                  batchStatus: 2
                };
              }
              return batchService.getGridData(parameter).then(function(res) {
                if (res.content[0]) {
                  if (res.content[0].batchStatus === 4) {
                    if (res.content[0].aipCount === 0 || !res.content[0].aipCount) {
                      item.progress = 0;
                    } else {
                      item.progress = (res.content[0].aipCount / res.content[0].aiu2sipSuccessCount) * 100;
                    }
                  }
                  if (res.content[0].batchStatus === 0) {
                    if (res.content[0].packageCount === 0 || !res.content[0].packageCount) {
                      item.progress = 0;
                    } else {
                      item.progress = (res.content[0].aiuCount / res.content[0].packageCount) * 100;
                    }
                  }
                  if (res.content[0].batchStatus === 2) {
                    if (res.content[0].aiuCount === 0 || !res.content[0].aiuCount) {
                      return item.progress = 0;
                    } else {
                      return item.progress = (res.content[0].aiu2sipSuccessCount / res.content[0].aiuCount) * 100;
                    }
                  }
                } else {
                  return item.progress = 0;
                }
              }, function(res) {});
            }
          });
        }, function(res) {});
      };
      getOverAll = function() {
        return statisticsService.getOverAll().then(function(res) {
          return vm.overAllInfo = res;
        }, function(res) {});
      };
      getSystemLists = function() {
        vm.loading = true;
        return connectMapService.getSystemLists().then(function(res) {
          var i, j, len, results, rows;
          vm.systemLength = res.length;
          results = [];
          for (i = j = 0, len = res.length; j < len; i = ++j) {
            rows = res[i];
            $scope.data.children.push({
              name: rows,
              type: 'unit'
            });
            results.push(angular.forEach($scope.data.children, function(item) {
              return getSystemInfo(item.name);
            }));
          }
          return results;
        }, function(res) {});
      };
      getSystemInfo = function(systemName) {
        return connectMapService.getSystemInfo(systemName).then(function(res) {
          var i, j, len, name, ref, results, rows;
          if (res.extractionMethod === 0) {
            name = '对接方式:ETL数据抽取';
          } else {
            name = '对接方式:AIU写入接口';
          }
          ref = $scope.data.children;
          results = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            rows = ref[i];
            if (rows.name === systemName) {
              results.push(rows.children = [
                {
                  name: name,
                  type: 'item'
                }, {
                  name: '连接状态:正常',
                  type: 'item'
                }, {
                  name: '已归档数据量:' + res.recordCount + '件,' + res.recordCapacity + 'GB',
                  type: 'item'
                }, {
                  name: '当前JOB:查看',
                  type: 'item'
                }
              ]);
            } else {
              results.push(void 0);
            }
          }
          return results;
        }, function(res) {});
      };
      listenEvent = function() {
        $scope.$on('node:mouseover', function(e, d) {
          return $timeout(function() {
            if (d.type === 'item' && d.name === '当前JOB:查看') {
              vm.tiptool.show = true;
              vm.tiptool.x = d.x;
              vm.tiptool.y = d.y;
              getList();
              return refreshList = $interval(function() {
                return getList();
              }, 5000, 0);
            }
          });
        });
        $scope.$on('node:mouseout', function(e, d) {
          return $timeout(function() {
            vm.tiptool.show = false;
            vm.tiptool.x = d.x;
            vm.tiptool.y = d.y;
            return $interval.cancel(refreshList);
          });
        });
      };
      init();
    }
  ]);

}).call(this);

//# sourceMappingURL=connectMap.controller.js.map
