// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  angular.module("myApp").service("infoArchivesService", [
    '$log', '$translate', 'adminRestangular', 'hsAPI', 'hsAuth', 'commonMethodSerivce', 'mdToastService', '$q', 'Restangular', function($log, $translate, adminRestangular, hsAPI, hsAuth, commonMethodSerivce, mdToastService, $q, Restangular) {
      var downloadErrorDoc, editCurrentUser, getMessageLists, getSideBarList, getUserImg, getUserInfo, markMessageStatus;
      $log.info("infoArchivesService");
      getSideBarList = function() {
        var lists;
        lists = {
          state: [
            {
              title: 'MODULES_STATISTICS_DATA_STATISTICS',
              url: 'infoArchives.statistics',
              img: 'fa fa-bar-chart',
              permission: 'statistics'
            }, {
              title: 'PROJECT_CONNECTMAP_CONNECTION_TOPOLOGY',
              url: 'infoArchives.connectMap',
              img: 'fa fa-code-fork',
              permission: 'connectMap'
            }
          ],
          data: [
            {
              title: 'MODULES_SERVICEWATCH_BATCH_MANAGEMENT',
              url: 'infoArchives.batch',
              img: 'fa fa-truck',
              permission: 'batch'
            }, {
              title: 'MODULES_DATABASE_DATA_BASE',
              url: 'infoArchives.dataBase',
              img: 'fa fa-database',
              permission: 'dataBase'
            }
          ],
          fileItem: [
            {
              title: 'MODULES_PROJECTMANAGE_SYSTEM_ACCESS',
              url: 'infoArchives.projectManage',
              img: 'fa fa-flag-checkered',
              permission: 'projectManage',
              childRoute: ['infoArchives.projectEdit.basicData', 'infoArchives.projectEdit.ruleSet', 'infoArchives.projectEdit.dataModule', 'infoArchives.projectEdit.moduleTemplate']
            }
          ],
          other: [
            {
              title: 'MODULES_SERVICEWATCH_SERVICE_MONITORING',
              url: 'infoArchives.serviceWatch',
              img: 'fa fa-server',
              permission: 'serviceWatch'
            }
          ]
        };
        return lists;
      };
      getUserInfo = function() {
        var deferred;
        deferred = $q.defer();
        adminRestangular.one(hsAPI['getUserId']).get({
          accessToken: hsAuth.getAccessToken()
        }).then(function(res) {
          $log.info(res);
          switch (res.code) {
            case '1':
              return deferred.resolve(res.data);
            case '0':
              commonMethodSerivce.logOut();
              return mdToastService.showToast(res.message);
            default:
              mdToastService.showToast(res.message);
              return deferred.reject(res.message);
          }
        }, function(res) {
          mdToastService.showToast($translate.instant('MODULES_SHOWTOAST_SERVER_ERROR'));
          return deferred.reject('error' + res);
        });
        return deferred.promise;
      };
      getUserImg = function() {
        var deferred;
        deferred = $q.defer();
        adminRestangular.one(hsAPI['getUserImg']).get({
          accessToken: hsAuth.getAccessToken(),
          id: hsAuth.getUserId()
        }).then(function(res) {
          $log.info(res);
          switch (res.code) {
            case '1':
              return deferred.resolve(res.data);
            case '0':
              commonMethodSerivce.logOut();
              return mdToastService.showToast(res.message);
            default:
              mdToastService.showToast(res.message);
              return deferred.reject(res.message);
          }
        }, function(res) {
          mdToastService.showToast($translate.instant('MODULES_SHOWTOAST_SERVER_ERROR'));
          return deferred.reject('error' + res);
        });
        return deferred.promise;
      };
      editCurrentUser = function(info) {
        var deferred;
        deferred = $q.defer();
        info.accessToken = hsAuth.getAccessToken();
        adminRestangular.one(hsAPI['editCurrentUser']).get(info).then(function(res) {
          $log.info(res);
          mdToastService.showToast(res.message);
          switch (res.code) {
            case '1':
              return deferred.resolve(res.data);
            case '0':
              return commonMethodSerivce.logOut();
            default:
              return deferred.reject(res.message);
          }
        }, function(res) {
          mdToastService.showToast($translate.instant('MODULES_SHOWTOAST_SERVER_ERROR'));
          return deferred.reject('error' + res);
        });
        return deferred.promise;
      };
      getMessageLists = function() {
        var deferred;
        deferred = $q.defer();
        Restangular.one(hsAPI['getMessageLists']).get({
          accessToken: hsAuth.getAccessToken(),
          accept_by: hsAuth.getUserId(),
          status: 2
        }).then(function(res) {
          $log.info(res);
          switch (res.code) {
            case '1':
              return deferred.resolve(res.data);
            case '0':
              commonMethodSerivce.logOut();
              return mdToastService.showToast(res.message);
            default:
              deferred.reject(res.message);
              return mdToastService.showToast(res.message);
          }
        }, function(res) {
          mdToastService.showToast($translate.instant('MODULES_SHOWTOAST_SERVER_ERROR'));
          return deferred.reject('error' + res);
        });
        return deferred.promise;
      };
      markMessageStatus = function(ids) {
        var deferred;
        deferred = $q.defer();
        Restangular.one(hsAPI['markMessageStatus']).get({
          accessToken: hsAuth.getAccessToken(),
          ids: ids
        }).then(function(res) {
          switch (res.code) {
            case '1':
              return deferred.resolve(res.data);
            case '0':
              commonMethodSerivce.logOut();
              return mdToastService.showToast(res.message);
            default:
              deferred.reject(res.message);
              return mdToastService.showToast(res.message);
          }
        }, function(res) {
          mdToastService.showToast($translate.instant('MODULES_SHOWTOAST_SERVER_ERROR'));
          return deferred.reject('error' + res);
        });
        return deferred.promise;
      };
      downloadErrorDoc = function(id) {
        var deferred;
        deferred = $q.defer();
        Restangular.one(hsAPI['downloadErrorDoc']).get({
          accessToken: hsAuth.getAccessToken(),
          docId: id
        }).then(function(res) {
          switch (res.code) {
            case '1':
              return deferred.resolve(res.data);
            case '0':
              commonMethodSerivce.logOut();
              return mdToastService.showToast(res.message);
            default:
              deferred.reject(res.message);
              return mdToastService.showToast(res.message);
          }
        }, function(res) {
          mdToastService.showToast($translate.instant('MODULES_SHOWTOAST_SERVER_ERROR'));
          return deferred.reject('error' + res);
        });
        return deferred.promise;
      };
      this.downloadErrorDoc = downloadErrorDoc;
      this.markMessageStatus = markMessageStatus;
      this.getMessageLists = getMessageLists;
      this.getUserImg = getUserImg;
      this.editCurrentUser = editCurrentUser;
      this.getUserInfo = getUserInfo;
      this.getSideBarList = getSideBarList;
    }
  ]);

}).call(this);

//# sourceMappingURL=infoArchives.service.js.map
