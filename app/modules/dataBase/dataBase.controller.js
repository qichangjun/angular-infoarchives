// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  angular.module("myApp").controller("dataBaseController", [
    '$scope', '$log', 'dataBaseService', '$stateParams', '$state', 'initGrid', '$timeout', 'batchService', '$mdSidenav', 'mdDialogService', function($scope, $log, dataBaseService, $stateParams, $state, initGrid, $timeout, batchService, $mdSidenav, mdDialogService) {
      var PAHT_OF_TEMPLATE_MDDIALOG, changeChartType, checkData, closeSideBar, filterData, getItems, getTreeData, getUnits, init, listenEvent, vm;
      vm = this;
      vm.parameter = $stateParams;
      if (!vm.parameter.chartType) {
        vm.parameter.chartType = 'unit';
      }
      PAHT_OF_TEMPLATE_MDDIALOG = 'modules/dataBase/template/mdDialog/';
      init = function() {
        $scope.gridOptions = {};
        initGrid.getScope($scope);
        initGrid.getGrid();
        getTreeData();
        listenEvent();
      };
      getTreeData = function() {
        return $timeout(function() {
          vm.parameter.item = 'all';
          vm.parameter.unit = 'all';
          if (vm.parameter.chartType === 'unit') {
            $scope.data = dataBaseService.getTreeData();
          } else if (vm.parameter.chartType === 'source') {
            $scope.data = dataBaseService.getTreeData();
          }
          getUnits();
          return getItems();
        });
      };
      getItems = function() {
        var i, items, j, len, ref, results, rows, x;
        vm.itemLists = [];
        ref = $scope.data.children;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          rows = ref[i];
          if (vm.parameter.unit) {
            if (rows.objectId === vm.parameter.unit) {
              results.push((function() {
                var k, len1, ref1, results1;
                ref1 = rows.children;
                results1 = [];
                for (x = k = 0, len1 = ref1.length; k < len1; x = ++k) {
                  items = ref1[x];
                  results1.push(vm.itemLists.push(items));
                }
                return results1;
              })());
            } else {
              results.push(void 0);
            }
          } else {
            results.push((function() {
              var k, len1, ref1, results1;
              ref1 = rows.children;
              results1 = [];
              for (x = k = 0, len1 = ref1.length; k < len1; x = ++k) {
                items = ref1[x];
                results1.push(vm.itemLists.push(items));
              }
              return results1;
            })());
          }
        }
        return results;
      };
      getUnits = function() {
        var i, j, len, ref, results, rows;
        vm.unitLists = [];
        ref = $scope.data.children;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          rows = ref[i];
          results.push(vm.unitLists.push(rows));
        }
        return results;
      };
      listenEvent = function() {
        return $scope.$on('treeChart:selectNode', function(ev, d) {
          return $timeout(function() {
            if (d.type === 'items') {
              vm.entity = d;
              $mdSidenav('tree-data-node-detail').open();
            }
            if (!d) {
              vm.entity = {};
              return $mdSidenav('tree-data-node-detail').close();
            }
          });
        });
      };
      changeChartType = function(chartType) {
        return $state.go('.', vm.parameter, {
          notify: false
        });
      };
      checkData = function(event) {
        return mdDialogService.initCustomDialog('checkDataController', PAHT_OF_TEMPLATE_MDDIALOG + 'checkData.html?' + window.hsConfig.bust, event, null).then(function(res) {}, function(res) {});
      };
      closeSideBar = function() {
        return $mdSidenav('tree-data-node-detail').close();
      };
      filterData = function() {
        $scope.$broadcast('tree:filter', vm.parameter.unit, vm.parameter.item);
        getItems();
        vm.entity = {};
        return $mdSidenav('tree-data-node-detail').close();
      };
      vm.getTreeData = getTreeData;
      vm.filterData = filterData;
      vm.closeSideBar = closeSideBar;
      vm.checkData = checkData;
      vm.changeChartType = changeChartType;
      init();
    }
  ]).controller('checkDataController', [
    '$scope', '$log', '$stateParams', '$mdDialog', 'dataBaseService', 'i18nService', 'hsTpl', 'mdDialogService', function($scope, $log, $stateParams, $mdDialog, dataBaseService, i18nService, hsTpl, mdDialogService) {
      var PAHT_OF_TEMPLATE_MDDIALOG, cancel, getGridData, init, initGrid, previewDoc, vm;
      vm = this;
      vm.parameter = {};
      vm.parameter.currentPage = 1;
      vm.parameter.pageSize = 50;
      PAHT_OF_TEMPLATE_MDDIALOG = 'modules/dataBase/template/mdDialog/';
      init = function() {
        getGridData();
        return initGrid();
      };
      initGrid = function() {
        i18nService.setCurrentLang('zh-cn');
        return $scope.gridOptions = {
          totalItems: vm.parameter.pageSize * vm.parameter.currentPage,
          selectionRowHeaderWidth: 40,
          enableRowSelection: true,
          enableSelectAll: true,
          paginationPageSize: Number(vm.parameter.pageSize),
          paginationCurrentPage: Number(vm.parameter.currentPage),
          rowTemplate: hsTpl.hsRowTemplate,
          useExternalPagination: true,
          useExternalSorting: true,
          rowHeight: 40,
          onRegisterApi: function(gridApi) {
            $scope.cancelSelect = function(row) {
              if (gridApi.selection) {
                if (gridApi.selection.getSelectedRows().length === 1 && gridApi.selection.getSelectedRows()[0] === row) {
                  return gridApi.selection.clearSelectedRows();
                } else if (gridApi.selection.getSelectedRows().length === 1 && gridApi.selection.getSelectedRows()[0] !== row) {
                  gridApi.selection.clearSelectedRows();
                  return gridApi.selection.selectRow(row);
                } else if (gridApi.selection.getSelectedRows().length < 1) {
                  return gridApi.selection.selectRow(row);
                } else if (gridApi.selection.getSelectedRows().length > 1) {
                  gridApi.selection.clearSelectedRows();
                  return gridApi.selection.selectRow(row);
                }
              }
            };
            $scope.gridApi = gridApi;
            return gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
              if (!(vm.parameter.currentPage === newPage && vm.parameter.pageSize === pageSize)) {
                vm.parameter.currentPage = newPage;
                vm.parameter.pageSize = pageSize;
                return getGridData();
              }
            });
          }
        };
      };
      getGridData = function() {
        vm.loading = true;
        return dataBaseService.getGridData(vm.parameter).then(function(res) {
          var column, j, len, ref, results;
          vm.loading = false;
          $scope.gridOptions.data = res.recordList;
          $scope.gridOptions.totalItems = res.pageInfo.totalCount;
          $scope.gridOptions.columnDefs = dataBaseService.recordList;
          $scope.gridOptions.columnVirtualizationThreshold = dataBaseService.recordList.length;
          ref = $scope.gridOptions.columnDefs;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            column = ref[j];
            results.push(column.enableColumnMenu = false);
          }
          return results;
        }, function(res) {});
      };
      cancel = function() {
        return $mdDialog.cancel();
      };
      previewDoc = function(event) {
        return mdDialogService.initCustomDialog('previewDocController', PAHT_OF_TEMPLATE_MDDIALOG + 'previewDoc.html?' + window.hsConfig.bust, event, {
          objectId: $scope.gridApi.selection.getSelectedRows()[0].objectId
        }).then(function(res) {}, function(res) {});
      };
      vm.previewDoc = previewDoc;
      vm.cancel = cancel;
      init();
    }
  ]).controller('previewDocController', [
    '$scope', '$log', '$stateParams', '$mdDialog', 'dataBaseService', 'objectId', function($scope, $log, $stateParams, $mdDialog, dataBaseService, objectId) {
      var cancel, init, vm;
      vm = this;
      vm.objectId = objectId;
      init = function() {};
      cancel = function() {
        return $mdDialog.cancel();
      };
      vm.cancel = cancel;
      init();
    }
  ]);

}).call(this);

//# sourceMappingURL=dataBase.controller.js.map
