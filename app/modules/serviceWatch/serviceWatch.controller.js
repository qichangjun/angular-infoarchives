// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  angular.module("myApp").controller("serviceWatchController", [
    '$scope', '$log', '$state', 'mdDialogService', '$timeout', '$mdToast', 'JobRestangular', 'i18nService', 'serviceWatchService', 'hsTpl', function($scope, $log, $state, mdDialogService, $timeout, $mdToast, JobRestangular, i18nService, serviceWatchService, hsTpl) {
      var getList, init, initGrid, startService, stopService, vm;
      vm = this;
      init = function() {
        initGrid();
        getList();
      };
      initGrid = function() {
        i18nService.setCurrentLang('zh-cn');
        return $scope.gridOptions = {
          rowTemplate: hsTpl.hsRowTemplate,
          useExternalPagination: true,
          useExternalSorting: true,
          rowHeight: 60,
          onRegisterApi: function(gridApi) {
            return $scope.gridApi = gridApi;
          }
        };
      };
      getList = function() {
        return serviceWatchService.getList().then(function(res) {
          var column, i, j, k, len, len1, ref, ref1, results, rows, str;
          $scope.gridOptions.data = res.data;
          ref = $scope.gridOptions.data;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            rows = ref[i];
            str = Date.parse(new Date()).toString();
            rows.keepTime = (str - rows.startDate) / 3600;
            rows.keepDay = Math.floor(rows.keepTime / 86400);
            rows.keepHour = Math.floor(rows.keepTime % 86400 / 3600);
            rows.keepMinute = Math.floor(rows.keepTime % 86400 / 3600);
          }
          $scope.gridOptions.columnDefs = serviceWatchService.serviceList;
          $scope.gridOptions.columnVirtualizationThreshold = serviceWatchService.serviceList.length;
          ref1 = $scope.gridOptions.columnDefs;
          results = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            column = ref1[k];
            results.push(column.enableColumnMenu = false);
          }
          return results;
        }, function(res) {});
      };
      startService = function(row, e) {
        if (row.jobStatus === 'PAUSED') {
          row.isChanging = true;
          return serviceWatchService.startService(row.id).then(function(res) {
            row.isChanging = false;
            getList();
          }, function(res) {
            row.isChanging = false;
          });
        }
      };
      stopService = function(row, e) {
        if (row.jobStatus !== 'PAUSED') {
          row.isChanging = true;
          return serviceWatchService.stopService(row.id).then(function(res) {
            row.isChanging = false;
            getList();
          }, function(res) {
            row.isChanging = false;
          });
        }
      };
      vm.stopService = stopService;
      vm.startService = startService;
      init();
    }
  ]);

}).call(this);

//# sourceMappingURL=serviceWatch.controller.js.map
